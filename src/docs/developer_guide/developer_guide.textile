h1. ChiliLog Developer Guide

h2. 1. Setting Up Your Development Environment

h3. 1.1 Getting the Source Code

The code is located at "http://github.com/chililog/chililog-server":http://github.com/chililog/chililog-server.
 
To get a read only copy:

pre(code).. 
    git clone git://github.com/chililog/chililog-server.git
    cd chililog-server
p.     


h3. 1.2 Install mongoDB

1. Download "mongoDB":http://www.mongodb.org/downloads.

2. Follow the "instructions":http://www.mongodb.org/display/DOCS/Quickstart to install and start mongoDB.

3. Initialise ChiliLog by running the @scripts/mongodb-create.js@ script.
* It will create a new database called @chililog@ on your mongoDB server.
* A new ChiliLog user with the username @admin@ and password @admin@ is also created.

pre(code)..      
    $ mongo mongodb-create.js 
    MongoDB shell version: 1.6.5
    connecting to: test
        
    Adding db.system.user 'chililog'
    {
        "_id" : ObjectId("4d200e387f2dea40d435b113"),
        "user" : "chililog",
        "readOnly" : false,
        "pwd" : "47865e05bc9a72f4add54ce2b0a1bae8"
    }
    
    Creating Config collection
    
    Adding Config 'schemaversion'
    {
        "_id" : ObjectId("4d56241698c2b62ac88f5c4d"),
        "name" : "schemaversion",
        "value" : 1
    }
    
    Creating ChiliLog Admin User
        
    Adding ChiliLog Repository

    Finish
p.     


h3. 1.3 Install Tools

1. Install "Maven 3":http://maven.apache.org/download.html or higher.

2. Install "Ant 1.8":http://ant.apache.org/ or higher.

3. Install "SproutCore 2.0":http://www.sproutcore.com. 
* SproutCore is only needed if you are planning to play around with the user interface.
* SproutCore requires ruby and ruby gem to have been installed.



h3. 1.4 Install Eclipse IDE

1. Install "Eclipse":http://www.eclipse.org/downloads/.
* I personally use the __"Eclipse IDE for Java EE Developers"__ package.

2. Start Eclipse

3. Install Eclipse Plugins via the Eclipse Marketplace.  
* "m2eclipse":http://m2eclipse.sonatype.org/installing-m2eclipse.html for Maven; and 
* "EGit":http://www.eclipse.org/egit for Git.

4. Generate Eclipse project files.
* At the shell prompt, run @mvn eclipse:eclipse compile@
* @.project@ and @.classpath@ files will be generated.

5. Import the @chililog-server@ project into your workspace.
* From the menu toolbar, select @File > Import@.
* From the popup window, select @Existing Maven Projects@ in the @Maven@ folder.  
* Click @Next@ and then select the @chililog-server@ directory.

6. Add Git support. 
* Right click the project in the workspace
* From the popup context menu, select @Teams  > Share Project@.
* Select @Git@ and then click @Next@.

7. Add code styles. 
* From the menus, select @Window > Preferences@.
* In the popup window, select @Java > Code Style > Formatter@.
* Click @Import@ and select @scripts/ChiliLog-JavaCodeStyle.xml@.

In end, your IDE should look as follows.

!EclipseIDE.png! 



h2. 2. Components

The ChiliLog server looks as follows:

!ChiliLogComponents.png!

h3. 2.2 Data Store

As the name suggests, the data store is where all the log entry and configuration data is stored. 

h3. 2.3 Engine

The engine is responsible for parsing and storing log entries into the data store. 

It is also responsible for monitoring activities with the goal of notifying the user once configurable events are met or thresholds are exceeded.

We decided to queue incoming log entries rather than directly process and write them to mongoDB.

Why? The main reason is scalability. Using a message queue allows buffering of incoming data so that processing (parsing and writing to mongoDB) can be throttled.  This means that we can handle higher peak loads without overloading the hardware. 

h3. 2.4 PubSub Service

The PubSub service is responsible for handling incoming and outgoing log entries.

It follows the "publish and subscribe messaging pattern":http://en.wikipedia.org/wiki/Publish/subscribe.


h3. 2.5 Workbench Service

The workbench service provides you with a UI and API to interact with Chililog.

* View real time streaming of log entries
* Search historical log entries
* Configure repositories and users 



h2. 3. Data Layer

h3. 3.1 Definitions  

* *Log*<br/>Information output from a device, system or application detailing events and activity.

* *Log Entry*<br/>A record, detailing a specific event or activity, that is stored in a log.  For example, for a text log file, a log entry maybe considered as a line item. 

* *Repository*<br/>A "bucket" within ChiliLog where entries from one or more logs are be stored.

* *Repository Entry*<br/>A record, detailing a specific event or activity, that is stored in a repository.  It corresponds to a log entry.

* *Repository Field*<br/>A data item within a repository entry. For example, the timestamp of a repository entry is a field.

* *Users*<br/>Represent credentials and profiles of users who can log into the Chililog Workbench.

!ChiliLogDefinitions.png!

h3. 3.2 MongoDB

ChiliLog server needs to store semi-structured data quickly.

We want able to dynamically define (and re-define) parsing rules to extract data from all sorts of different log entries.  As such, we cannot pre-determine the type of data that is to be stored.  This makes it difficult to define up front the SQL columns we need.  Sure we can dynamically add/remove columns as need be in an SQL database, however it seems more troublesome that using mongoDB.

We decided on "mongoDB":http://www.mongodb.org/ over a number of other non-SQL data stores because:

* Simple install.
* Simple query language.
* Scalable
* Mature and is used in production

Here's a "comparison":http://www.mongodb.org/display/DOCS/MongoDB,+CouchDB,+MySQL+Compare+Grid that we took into consideration.

Cassandra and Hardoop was also considered but at the time of starting Chililog, these projects were in their early stages of development.

h3. 3.2 MongoDB Configuration

The data model is implemented within a mongoDB database.

* By default, the database is called @chililog@.

* A *repository*  is implemented as a collection within the @chililog@ database.  For example, if a repository is named @abc@ then its mongoDB collection is named @repo_abc@.

* A *repository entry* is implemented as a document (AKA record) in the collection.

* A *repository field* is implemented as a field within a document.

* The *meta-data* that describes a repository is stored in the @repoinfo@ collection.

* *User* account information is stored in the @users@ collection. 

h3. 3.3 Data Access

The Java code for access mongoDB is kept in the @org.chililog.server.data@ package.

The mongoDB Java "driver":http://www.mongodb.org/display/DOCS/Java+Language+Center is used for communicating with mongoDB.

A mongoDB document is represented as a strongly-typed __Business Objects__ within ChiliLog.  For example, a document in the @users@ collection is represented by the @UserBO@ class.

__Controllers__ are used for reading and writing business objects.  For example, @UserController@ is used for reading and writing @UserBO@ objects into the @users@ collection.

Controllers can also return a list of business objects matching a specific __List Criteria__.

pre(code).. 
    DB db = MongoConnection.getInstance().getConnection();
    
    // Insert 
    UserBO user = new UserBO();
    user.setUsername("UserTestUser1");
    user.setPassword("abc123!", true);
    user.addRole("Role1");
    user.addRole("Role2");        
    user.setDisplayName("Lloyd Christmas");
    UserController.getInstance().save(db, user);

    // Get
    UserBO user2 = UserController.getInstance().get(db, "UserTestUser1");

    // Delete
    UserController.getInstance().remove(db, user2);
    
    // List
    UserListCriteria criteria= new UserListCriteria();
    criteria.setRole("ListRoleA");
    List<UserBO> list = UserController.getInstance().getList(db, criteria);
p.      

Note that a mongoDB database connection is allocated by @MongoConnection@.  It provides an authenticated connection.  The credentials are read from the __app.properties__ file.



h2. 4. The Engine

@org.chililog.server.engine@ is the Java package for the engine. 

h3. 4.1 Message Queue - HornetQ

We decided on "HornetQ":http://www.jboss.org/hornetq because:

* Claims to be the "fastest":http://community.jboss.org/wiki/HornetQ-thePerformanceLeaderinEnterpriseMessaging
* Allows for different protocol to be used by client side importers so that organization security frameworks can be met.
* Allows for server side log entry routing (i.e. a log entry may be parsed differently and save to 2 or more different repositories).  This centralizes execution of routing logic to the server.
* Scalable
* Can be clustered
* Embeddable

@MqService@ Java class is our wrapper for HornetQ.  This class starts, stops and configures HornetQ at run time.

The @RepositoryService@ sits on top of @MqService@ and is responsible for starting and stopping repositories.  

* When a repository is started, a HornetQ 'address' is deployed.  The address is a unique for each repository.  Log entries destined for the repository must be published to the repository's address.  For a repository called @abc@, by convention, the address is @repo.abc@.

* If log entries for a repository are to be saved so they can be searched, a queue is deployed to subscribe to log entries published to the repository's address.  Using the above example of repository @abc@, the storage queue is called @repo.abc.storage@ and deployed to address @repo.abc@.

For security, we have configured HornetQ to use the JAAS as the framework for authentication and authorization.
* Users must be authenticated with the users as defined in the @users@ monbodb collection.
* Publishing to a repository (HornetQ address) requires the authenticated user be assigned a role of @repo.abc.publisher@ or @repo.abc.administrator@.
* Subscribing to a repository (HornetQ queue) requires the authenticated user be assigned a role of @repo.abc.subscriber@ or @repo.abc.administrator@.

h3. 4.2 Workers

Workers are responsible for:

* Storing incoming log entries on the message queue
** Storage workers are instances of @RepositoryStorageWorker@ class. Each instance run in its own thread.
** Storage workers are started and stopped by @RepositoryService@.

* Monitoring logs and sending notifications upon a trigger effect
** To be implemented 

h2. 5. PubSub Service

The code for the PubSub service is located in @org.chililog.server.pubsub@ Java package. 

The PubSub service supports a number of different protocols that can be used to publish or subscribe to log entries.
* Hornet Q core - proprietary Hornet Q protocol
* STOMP over TCP/IP
* STOMP over WebSockets
* JSON over HTTP - publishing only
* JSON over WebSockets

h3. 5.1 HornetQ Core

HornetQ Core protocol is directly handled by HornetQ. 

For source code examples, check out "https://github.com/chililog/chililog-java-pubsub":https://github.com/chililog/chililog-java-pubsub

h4. 5.1.1 Publishing

Publish to the Hornet Q address "repo.<repository name>". For example, if the repository is named "abc", the address is "repo.abc".

The username and password must be for a user that has publisher or administrator role. 

Each message must contain the following:
* @Timestamp@ Property - time when log entry was created in; must be formatted like '2001-12-31T23:01:01.000Z'
* @Source@ Property - name of the device or application that generated the log entry
* @Host@ Property - host name or ip address of the device 
* @Severity@ Property - 0 is higest and 7 is lowest
* Message - log entry

h4. 5.1.1 Subscribing
 
Deploy a temporary queue named 'repo.<repository name>.<uuid>' to the Hornet Q address "repo.<repository name>". For example, if the repository is named "abc", the address is "repo.abc".

You can then consume messages delivered to the queue.


h3. 5.2 STOMP

STOMP over TCP/IP and web socket protocols are directly handled by HornetQ. 

h4. 5.2.1 Publishing

Publish to the Hornet Q address "repo.<repository name>". For example, if the repository is named "abc", the address is "repo.abc".

The username and password must be for a user that has publisher or administrator role. 

Each message must contain the following:
* @Timestamp@ Property - time when log entry was created in; must be formatted like '2001-12-31T23:01:01.000Z'
* @Source@ Property - name of the device or application that generated the log entry
* @Host@ Property - host name or ip address of the device 
* @Severity@ Property - 0 is higest and 7 is lowest
* Message - log entry

h4. 5.2.1 Subscribing
 
Deploy a temporary queue named 'repo.<repository name>.<uuid>' to the Hornet Q address "repo.<repository name>". For example, if the repository is named "abc", the address is "repo.abc".

You can then consume messages delivered to the queue.


h3. 5.3 JSON HTTP and WebSocket

JSON over HTTP and WebSocket is handled by a custom Netty based HTTP web server that proxies connection to HornetQ using the HornetQ core protocol. 
The code is located in @org.chililog.server.pubsub.jsonhttp@ Java package. "Netty":http://www.jboss.org/netty is used because it is light weight, embeddable, fast and also used by HornetQ.

h4. 5.3.1 Publishing

Publishing is performed using the following JSON data.

pre(code).. 
    {
      "MessageType": "PublicationRequest",
      "MessageID": "11111",
      "RepositoryName": "sandpit",
      "Username": "sandpitpublisher",
      "Password": "password",
      "LogEntries": [
        {
          "Timestamp": "2011-01-01T00:00:00.000Z",
          "Source": "junit",
          "Host": "localhost",
          "Severity": "4",
          "Message": "test message 0"
        }
      ]
    }
p.   

A successful response is as follows:

pre(code).. 
    {
      "MessageType": "PublicationResponse",
      "MessageID": "11111",
      "Success": true
    }
p.   

An error response is as follows:

pre(code).. 
    {
      "MessageType": "PublicationResponse",
      "MessageID": "11111",
      "Success": false,
      "ErrorMessage": "Access denied.",
      "ErrorStackTrace": "Some stack trace"
    }
p.   

h4. 5.3.1 Subscribing
 
Subscribing is only supported over web sockets.

Start subscribing by sending the following request.

pre(code).. 
    {
      "MessageType": "SubscriptionRequest",
      "MessageID": "22222",
      "RepositoryName": "sandpit",
      "Username": "sandpitsubscriber",
      "Password": "password"
    }
p.   

A successful response is returned when a log entries is received. For example:

pre(code).. 
    {
      "MessageType": "SubscriptionResponse",
      "MessageID": "22222",
      "Success": true,
      "LogEntry": {
        "Timestamp": "2011-01-01T00:00:00.000Z",
        "Source": "junit",
        "Host": "localhost",
        "Severity": "4",
        "Message": "test message 0"
      }
    }
p.   

An error response is as follows:

pre(code).. 
    {
      "MessageType": "SubscriptionResponse",
      "MessageID": "22222",
      "Success": false,
      "ErrorMessage": "Access denied.",
      "ErrorStackTrace": "Some stack trace"
    }
p.   


h2. 6. Workbench Service

We've chosen a client-server implementation for our workbench user interface.

* Client
** We use Sproutcore framework to implement our client side user interface. Here's "why":http://www.veebsbraindump.com/2010/08/my-take-on-what-is-sproutcore/ we chose SproutCore.
** It communicates with the server to access data via the HTTP REST API.

* Sever
** We create a custom Netty HTTP web server
** A Static file handler is embedded into the web server to deliver the HTML, javascript and css files to the browser
** A HTTP REST API is also embedded into the web server for any client to consume  
** @org.chililog.server.workbench@ is the package containing all the server side code.



h2. 6. General Coding Notes

h3. 6.1 Singletons

We decided to use the singleton pattern because: 

* Light-weight and less code compared to interface/factory/impl pattern and/or dependency injection frameworks.  ChiliLog server does not have to be embedded so we don't have to cater for "plug-ins".
* Better than static classes because we can use inheritance


h3. 6.2 Strings

Strings are externalised into the __src/main/resources/strings.properties__ file.

pre(code).. 
    #
    # org.chililog.server.data
    #
    Data.MongoDB.AuthenticationError=Invalid username or password to access mongodb '%s'.
    Data.MongoDB.ConnectionError=Cannot connect to MongDb. %s.
    Data.MongoDB.FieldNotFoundError=Cannot find field '%s'. 
    Data.MongoDB.QueryError=Error querying the database. '%s'. 
    Data.MongoDB.SaveError=Error saving a record to the database. '%s'. 
    Data.MongoDB.RemoveError=Error removing a record from the database. '%s'. 

p. The @org.chililog.sever.common.StringProperties@ class is use to read strings from this file.


h3. 6.3 Exceptions

We use a standard exception @org.chililog.sever.common.ChiliLogException@.

Use @ChiliLogException.getErrorCode()@ to retrieve the error that triggered the exception.  

Error codes are tightly integrated with Strings (see above section).  The error code is the same as a string code.  The error message is the string value.


h3. 6.4 Application and System Properties

All application and system properties used in the code are strongly typed and cached in the @org.chililog.sever.common.AppProperties@ and  @org.chililog.sever.common.SystemProperties@ respectively.

@SystemProperties@ reads properties as set when starting the JVM.

@AppProperties@ reads properties from the __src/main/resources/app.properties__ file.  Values in this file can be overriden by creating a new app.properties file and setting system property @chililog.config.directory@ to the name of the directory where the override app.properties file is located.


h3. 6.5 Logging

We are using log4J to manage logging inside ChiliLog server.

The configuration is located in the @src/main/resources/log4j.xml@ file.  Note that:

* @org.apache.log4j.AsyncAppender@ is used so that logging does not block.
* We have our own @org.chililog.server.engine.InternalLog4JAppender@ appender which writes directly to mongoDB. Because @AsyncAppender@ is used, blocking during writes should not be an issue.



h2. 7. Contributing

Please help. Just fork the code and submit Pull Requests.




 
